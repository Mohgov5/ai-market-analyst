# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Client tests
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
      
      - name: Install client dependencies
        run: cd client && npm ci
      
      - name: Run client tests
        run: cd client && npm test
      
      # Server tests
      - name: Install server dependencies
        run: cd server && npm ci
      
      - name: Run server tests
        run: cd server && npm test
      
      # AI service tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: 'ai-service/requirements.txt'
      
      - name: Install AI service dependencies
        run: cd ai-service && pip install -r requirements.txt
      
      - name: Run AI service tests
        run: cd ai-service && pytest

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Build client
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
      
      - name: Install client dependencies
        run: cd client && npm ci
      
      - name: Build client
        run: cd client && npm run build
      
      # Build server
      - name: Install server dependencies
        run: cd server && npm ci
      
      - name: Build server
        run: cd server && npm run build
      
      # Save builds as artifacts
      - name: Upload client build
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/dist
      
      - name: Upload server build
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Download builds
      - name: Download client build
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: client/dist
      
      - name: Download server build
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: server/dist
      
      # Build Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push client image
        uses: docker/build-push-action@v3
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-market-analyst-client:latest
      
      - name: Build and push server image
        uses: docker/build-push-action@v3
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-market-analyst-server:latest
      
      - name: Build and push AI service image
        uses: docker/build-push-action@v3
        with:
          context: ./ai-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ai-market-analyst-ai-service:latest
      
      # Deploy to production server
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /opt/ai-market-analyst
            docker-compose pull
            docker-compose up -d