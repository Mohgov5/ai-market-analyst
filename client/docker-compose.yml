# docker-compose.yml
version: '3.8'

services:
  # Frontend React application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    restart: always
    networks:
      - app-network
    environment:
      - VITE_API_URL=/api
      - VITE_WEBSOCKET_URL=/socket.io

  # Backend API server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      - mongo
      - redis
      - ai-service
    restart: always
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - PORT=8000
      - MONGO_URI=mongodb://mongo:27017/ai-market-analyst
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - AI_SERVICE_URL=http://ai-service:5000

  # AI service for analysis and sentiment
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    restart: always
    networks:
      - app-network
    environment:
      - FLASK_ENV=production
      - NEWS_API_KEY=${NEWS_API_KEY}
      - PORT=5000

  # MongoDB database
  mongo:
    image: mongo:5.0
    volumes:
      - mongo-data:/data/db
    restart: always
    networks:
      - app-network

  # Redis for caching and real-time features
  redis:
    image: redis:6.2-alpine
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - app-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./client/dist:/usr/share/nginx/html
    depends_on:
      - client
      - server
      - ai-service
    restart: always
    networks:
      - app-network

  # Monitoring tools
  prometheus:
    image: prom/prometheus:v2.30.3
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - app-network

  grafana:
    image: grafana/grafana:8.2.2
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  mongo-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge